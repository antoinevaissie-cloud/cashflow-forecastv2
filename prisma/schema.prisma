// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Monetary amounts stored as cents to avoid floating point errors
model AccountsReceivable {
  id            String   @id @default(cuid())
  owedBy        String?
  description   String
  amountCents   Int
  currency      String   @default("EUR")
  isPaid        Boolean  @default(false)
  paymentDate   DateTime
  notes         String?
  url           String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("accounts_receivable")
  @@index([paymentDate])
}

model AccountsPayable {
  id            String   @id @default(cuid())
  payee         String?
  description   String?
  amountCents   Int
  currency      String   @default("EUR")
  isPaid        Boolean  @default(false)
  paymentDate   DateTime
  notes         String?
  url           String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("accounts_payable")
  @@index([paymentDate])
}

// Monthly balances snapshot
model Balance {
  id                String   @id @default(cuid())
  month             DateTime // store first day of month
  boursoramaCents   Int      @default(0)
  boursoramaJointCents Int   @default(0)
  bnpCents          Int      @default(0)
  revolutGbpCents   Int      @default(0)
  otherAccountsCents Int     @default(0)
  sumOfCashCents    Int      @default(0)
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([month])
  @@map("balances")
}

// NextAuth.js authentication tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Monthly budget planning
model MonthlyBudget {
  id                  String   @id @default(cuid())
  month               DateTime // store first day of month
  category            String
  plannedInflowCents  Int      @default(0)
  plannedOutflowCents Int      @default(0)
  currency            String   @default("EUR")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([month, category])
  @@map("monthly_budgets")
  @@index([month])
}
